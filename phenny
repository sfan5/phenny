#!/usr/bin/env python3
"""
phenny - An IRC Bot
Copyright 2008, Sean B. Palmer, inamidst.com
Licensed under the Eiffel Forum License 2.

http://inamidst.com/phenny/

Note: DO NOT EDIT THIS FILE.
Run ./phenny, then edit the configuration file
Then run ./phenny again
"""

import sys, os, imp, optparse

CONFDIR = '~/.phenny'

dotdir = os.path.expanduser(CONFDIR)

def create_default_config(fn):
   f = open(fn, 'w')
   f.write(r"""
# Nickname of the bot
nick = 'phenny'
# Channels the bot shall join
channels = ['#example', '#test']
# Prefix used for commands
#prefix = '.'
# Realname
#name = 'Phenny Palmersbot, http://inamidst.com/phenny/'

# domain or IP of the IRC server
host = 'irc.example.net'
# port of the irc server
#port = 6667
# use SSL/TLS to encrypt communication with the server?
#ssl = False

# NickServ password
#password = 'example'
# Server password
#serverpass = 'serverpass'
# Owner of the bot
owner = 'nickname!ident@host'
# you can also define multiple owners:
#owner = ['nickname!ident@host1', 'nickname!ident@host2']
# Admins of the bot
admins = ['trustedperson1!ident@host', 'trustedperson2!ident@host']

# Wildcards you can use in hostmasks:
#  *     1 or more characters
#  ?     1 character
#  \a    1 or more letters
#  \n    1 or more digits
#  \o    1 or more alphanumeric chars
#  \h    1 or more hexadecimal chars

# Modules to disable
exclude = []
# Uncomment this if you want to enable modules rather than disable some
#enable = []
# Directories to load additional modules from
extra = []

# Services to load: maps channel names to white or black lists
external = {
	'#liberal': ['!'], # allow all
	'#conservative': [], # allow none
	'*': ['!'] # default whitelist, allow all
}

# EOF""")
   f.close()

def create_default_config_file(dotdir):
   print('Creating a default config file at %s/default.py...' % CONFDIR)
   default = os.path.join(dotdir, 'default.py')
   create_default_config(default)

   print('Done; now you can edit default.py, and run phenny! Enjoy.')
   sys.exit(0)

def create_dotdir(dotdir):
   print('Creating a config directory at %s...' % CONFDIR)
   try: os.mkdir(dotdir)
   except Exception as e:
      print('There was a problem creating %s:' % dotdir, file=sys.stderr)
      print(e.__class__, str(e), file=sys.stderr)
      print('Please fix this and then run phenny again.', file=sys.stderr)
      sys.exit(1)

   create_default_config_file(dotdir)

def check_dotdir():
   default = os.path.join(dotdir, 'default.py')

   if not os.path.isdir(dotdir):
      create_dotdir(dotdir)
   elif not os.path.isfile(default):
      create_default_config_file(dotdir)

def config_names(config):
   config = config or 'default'

   def files(d):
      names = os.listdir(d)
      return list(os.path.join(d, fn) for fn in names if fn.endswith('.py'))

   here = os.path.join('.', config)
   if os.path.isfile(here):
      return [here]
   if os.path.isfile(here + '.py'):
      return [here + '.py']
   if os.path.isdir(here):
      return files(here)

   there = os.path.join(dotdir, config)
   if os.path.isfile(there):
      return [there]
   if os.path.isfile(there + '.py'):
      return [there + '.py']
   if os.path.isdir(there):
      return files(there)

   print("Error: Couldn't find a config file!", file=sys.stderr)
   print('What happened to %s/default.py?' % CONFDIR, file=sys.stderr)
   sys.exit(1)

def main(argv=None):
   # Step One: Parse The Command Line

   parser = optparse.OptionParser('%prog [options]')
   parser.add_option('-c', '--config', metavar='fn',
      help='use this configuration file or directory')
   opts, args = parser.parse_args(argv)
   if args:
      print('Warning: ignoring spurious arguments', file=sys.stderr)

   # Step Two: Check Dependencies

   if not opts.config:
      check_dotdir() # require ~/.phenny, or make it and exit

   # Step Three: Load The Configurations

   config_modules = []
   for config_name in config_names(opts.config):
      name = os.path.basename(config_name).split('.')[0] + '_config'
      module = imp.load_source(name, config_name)
      module.filename = config_name

      if not hasattr(module, 'prefix'):
         module.prefix = '.'

      if not hasattr(module, 'name'):
         module.name = 'Phenny Palmersbot, http://inamidst.com/phenny/'

      if not hasattr(module, 'port'):
         module.port = 6667

      if not hasattr(module, 'password'):
         module.password = None

      if module.host == 'irc.example.net':
         print("Error: you must edit the config file first!\n" +
               "You're currently using %s" % module.filename, file=sys.stderr)
         sys.exit(1)

      config_modules.append(module)

   # Step Four: Load Phenny

   try: from __init__ import run
   except ImportError:
      try: from phenny import run
      except ImportError:
         print("Error: Couldn't find phenny to import", file=sys.stderr)
         sys.exit(1)

   # Step Five: Initialise And Run The Phennies

   # @@ ignore SIGHUP
   for config_module in config_modules:
      run(config_module) # @@ thread this

if __name__ == '__main__':
   main()
